/*
* NoC. (NoC Mntn Module.)
*
* Copyright (c) 2016 Huawei Technologies CO., Ltd.
*
* This program is free software; you can redistribute it and/or modify
* it under the terms of the GNU General Public License version 2 as
* published by the Free Software Foundation.
*/

#ifndef __HISI_NOC_TRANSCATION
#define __HISI_NOC_TRANSCATION

#include "hisi_noc.h"
#include <soc_cfg_sys_noc_bus_interface.h>

#define TRANS_F_BASE				SOC_CFG_SYS_NOC_BUS_ASP_TRANS_F_ID_COREID_ADDR(0)
#define TRANS_F_MODE				(SOC_CFG_SYS_NOC_BUS_ASP_TRANS_F_MODE_ADDR(0) - TRANS_F_BASE)
#define TRANS_F_ADDRBASE_LOW		(SOC_CFG_SYS_NOC_BUS_ASP_TRANS_F_ADDRBASE_LOW_ADDR(0) - TRANS_F_BASE)
#define TRANS_F_ADDRWINDOWSIZE		(SOC_CFG_SYS_NOC_BUS_ASP_TRANS_F_ADDRWINDOWSIZE_ADDR(0) - TRANS_F_BASE)
#define TRANS_F_OPCODE				(SOC_CFG_SYS_NOC_BUS_ASP_TRANS_F_OPCODE_ADDR(0) - TRANS_F_BASE)
#define TRANS_F_USERBASE			(SOC_CFG_SYS_NOC_BUS_ASP_TRANS_F_USERBASE_ADDR(0) - TRANS_F_BASE)
#define TRANS_F_USERMASK			(SOC_CFG_SYS_NOC_BUS_ASP_TRANS_F_USERMASK_ADDR(0) - TRANS_F_BASE)
#define TRANS_F_SECURITYMASK		(SOC_CFG_SYS_NOC_BUS_ASP_TRANS_F_SECURITYMASK_ADDR(0) - TRANS_F_BASE)
#define TRANS_P_EN					(SOC_CFG_SYS_NOC_BUS_ASP_TRANS_P_EN_ADDR(0) - TRANS_F_BASE)
#define TRANS_P_MODE				(SOC_CFG_SYS_NOC_BUS_ASP_TRANS_P_MODE_ADDR(0) - TRANS_F_BASE)
#define TRANS_P_THRESHOLDS_0_0		(SOC_CFG_SYS_NOC_BUS_ASP_TRANS_P_THRESHOLDS_0_0_ADDR(0) - TRANS_F_BASE)
#define TRANS_P_THRESHOLDS_0_1		(SOC_CFG_SYS_NOC_BUS_ASP_TRANS_P_THRESHOLDS_0_1_ADDR(0) - TRANS_F_BASE)
#define TRANS_P_THRESHOLDS_0_2		(SOC_CFG_SYS_NOC_BUS_ASP_TRANS_P_THRESHOLDS_0_2_ADDR(0) - TRANS_F_BASE)
#define TRANS_P_THRESHOLDS_0_3		(SOC_CFG_SYS_NOC_BUS_ASP_TRANS_P_THRESHOLDS_0_3_ADDR(0) - TRANS_F_BASE)
#define TRANS_P_OVERFLOWSTATUS		(SOC_CFG_SYS_NOC_BUS_ASP_TRANS_P_OVERFLOWSTATUS_ADDR(0) - TRANS_F_BASE)
#define TRANS_P_OVERFLOWRESET		(SOC_CFG_SYS_NOC_BUS_ASP_TRANS_P_OVERFLOWRESET_ADDR(0) - TRANS_F_BASE)
#define TRANS_P_PRESCALER 			(SOC_CFG_SYS_NOC_BUS_ASP_TRANS_P_PRESCALER_ADDR(0) - TRANS_F_BASE)
#define TRANS_M_MAINCTL				(SOC_CFG_SYS_NOC_BUS_ASP_TRANS_M_MAINCTL_ADDR(0) - TRANS_F_BASE)
#define TRANS_M_CFGCTL				(SOC_CFG_SYS_NOC_BUS_ASP_TRANS_M_CFGCTL_ADDR(0) - TRANS_F_BASE)
#define TRANS_M_STATPERIOD			(SOC_CFG_SYS_NOC_BUS_ASP_TRANS_M_STATPERIOD_ADDR(0) - TRANS_F_BASE)
#define TRANS_M_STATALARMMAX		(SOC_CFG_SYS_NOC_BUS_ASP_TRANS_M_STATALARMMAX_ADDR(0) - TRANS_F_BASE)
#define TRANS_M_STATALARMCLR		(SOC_CFG_SYS_NOC_BUS_ASP_TRANS_M_STATALARMCLR_ADDR(0) - TRANS_F_BASE)
#define TRANS_M_COUNTERS_0_SRC		(SOC_CFG_SYS_NOC_BUS_ASP_TRANS_M_COUNTERS_0_SRC_ADDR(0) - TRANS_F_BASE)
#define TRANS_M_COUNTERS_0_ALARMMODE	(SOC_CFG_SYS_NOC_BUS_ASP_TRANS_M_COUNTERS_0_ALARMMODE_ADDR(0) - TRANS_F_BASE)
#define TRANS_M_COUNTERS_0_VAL		(SOC_CFG_SYS_NOC_BUS_ASP_TRANS_M_COUNTERS_0_VAL_ADDR(0) - TRANS_F_BASE)
#define TRANS_M_COUNTERS_1_SRC		(SOC_CFG_SYS_NOC_BUS_ASP_TRANS_M_COUNTERS_1_SRC_ADDR(0) - TRANS_F_BASE)
#define TRANS_M_COUNTERS_1_ALARMMODE	(SOC_CFG_SYS_NOC_BUS_ASP_TRANS_M_COUNTERS_1_ALARMMODE_ADDR(0) - TRANS_F_BASE)
#define TRANS_M_COUNTERS_1_VAL		(SOC_CFG_SYS_NOC_BUS_ASP_TRANS_M_COUNTERS_1_VAL_ADDR(0) - TRANS_F_BASE)
#define TRANS_M_COUNTERS_2_SRC		(SOC_CFG_SYS_NOC_BUS_ASP_TRANS_M_COUNTERS_2_SRC_ADDR(0) - TRANS_F_BASE)
#define TRANS_M_COUNTERS_2_ALARMMODE	(SOC_CFG_SYS_NOC_BUS_ASP_TRANS_M_COUNTERS_2_ALARMMODE_ADDR(0) - TRANS_F_BASE)
#define TRANS_M_COUNTERS_2_VAL		(SOC_CFG_SYS_NOC_BUS_ASP_TRANS_M_COUNTERS_2_VAL_ADDR(0) - TRANS_F_BASE)
#define TRANS_M_COUNTERS_3_SRC		(SOC_CFG_SYS_NOC_BUS_ASP_TRANS_M_COUNTERS_3_SRC_ADDR(0) - TRANS_F_BASE)
#define TRANS_M_COUNTERS_3_ALARMMODE	(SOC_CFG_SYS_NOC_BUS_ASP_TRANS_M_COUNTERS_3_ALARMMODE_ADDR(0) - TRANS_F_BASE)
#define TRANS_M_COUNTERS_3_VAL		(SOC_CFG_SYS_NOC_BUS_ASP_TRANS_M_COUNTERS_3_VAL_ADDR(0) - TRANS_F_BASE)

void disable_transcation_probe (void __iomem *base);
void enable_transcation_probe(const struct noc_node *node, void __iomem *base);
void noc_transcation_probe_hanlder(const struct noc_node *node, void __iomem *base, unsigned int idx);
void init_transcation_info(struct noc_node *node);
void enable_transcation_probe_by_name(const char *name);
void disable_transcation_probe_by_name(const char *name);
void config_transcation_probe(const char *name, const struct transcation_configration *tran_cfg);
#endif
