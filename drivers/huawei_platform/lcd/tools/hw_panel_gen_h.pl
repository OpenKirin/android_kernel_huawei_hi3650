#!/usr/bin/perl -w
#use packages
use FindBin qw($Bin);
use lib "$Bin/lib";
use lib "$Bin/share";
use XML::LibXML;
use IO::Handle;
use warnings;
use strict;
use File::Spec;
use File::Basename;

# initialize the parser
my $parser = new XML::LibXML;

# open a filehandle and parse
my $fh = new IO::Handle;

my $name = "";
my $nameinH = "";
my $productN = "";
my @Headers;
my @LCDEnum;
my @LCDMap;

my $fail_error_hdr = "make[0]: *** FATAL ERROR: ";

my $print_default_dtsi = 0;
my $fastboot_include_folder = $ARGV[0];
my $panel_xml_file = "../panel";

#Execution start time
my $start_time = time;

# get the abs path for tools folder so that we can copy the 
# files with the relative path, the tool will execute in this
# folder
my $abs_path = File::Spec->rel2abs($0);
$abs_path = dirname($abs_path);
chdir $abs_path;

#get list of all xml files
my @files = glob("$panel_xml_file/*.xml");

foreach my $file (@files) {
	print "parsing $file\n";
	system("./localperl/bin/perl parser_h.pl ".$file." panel ".$ARGV[0]);

	if ($?) {
		die "$fail_error_hdr Failed to parse file: $file!\n";
	}

	my $xmldoc = $parser->parse_file($file);

	for my $property($xmldoc->findnodes('/GCDB/PanelId')) {
		$name = $property->textContent();
	}

	for my $property($xmldoc->findnodes('/GCDB/PanelH'))
	{
		$nameinH = $property->textContent();
	}
	
	my $header = 'hw_panel_' . $nameinH . ".h";
	#save vars to process it later
	push(@Headers, $header);
	push(@LCDEnum, uc($nameinH));
	
	for my $dest($xmldoc->findnodes('/GCDB/ProductList/Product')) {
		my $productname = "None";
		my $productid = 0xFFFF;
		my $gpioid = 0xFF;

		for my $prop($dest->findnodes('./Name')) {
			$productname = $prop->textContent();
		}
		
		for my $prop($dest->findnodes('./ProductID')) {
			$productid = $prop->textContent();
		}

		for my $prop($dest->findnodes('./GpioID')) {
			$gpioid = $prop->textContent();
		}

		push(@LCDMap, uc($nameinH)."_PANEL, ".$gpioid.", ".$productid);
	}
}

open (my $PANELH, ">$fastboot_include_folder/hw_lcd_panels.h") or die $fail_error_hdr.$!;

#add autogen header to header file
printheader($PANELH);

#add header safe guard
print $PANELH "\n#ifndef _HW_LCD_PANELS__H_\n";
print $PANELH "\n#define _HW_LCD_PANELS__H_\n\n";


print $PANELH "#include \"hw_lcd_panel.h\"\n";
#print $PANELH "#include \"panel_nt35521_720p_video.h\"\n";
#include all the headers created by the xml files
my $file;
foreach $file (@Headers) {
	print $PANELH "#include \"".$file."\"\n";
}


#print enum for LCD ID
printlcdenum($PANELH, \@LCDEnum);

#print LCD Map structure
printstructure($PANELH, \@LCDMap);

#make the function
#lcd enum selection function
printlcdselectionfunc($PANELH, \@LCDEnum);

#select the LCD based on board and gpio
printlcdmapfunc($PANELH);

#add header safe guard
print $PANELH "\n#endif /*_HW_LCD_PANELS__H_*/\n";

exit 0;

#Function to truncate and recreate the dtsi file if not recent

sub printheader
{
	my $fh = shift;
	print $fh "/*---------------------------------------------------------------------------\n";
	print $fh " * This file is autogenerated file using huawei LCD parser. Please do not edit it.\n";
	print $fh " * Update input XML file to add a new entry or update variable in this file\n";
	print $fh " * Parser location: device/hisilicon/common/display/tools/huawei_lcd_panel \n";
	print $fh " *---------------------------------------------------------------------------*/\n\n";
}

sub printlcdenum
{
	my $fh = shift;
	my $list = shift;
	my $lcdenum;
	print $fh "\n/*---------------------------------------------------------------------------*/\n";
	print $fh "/* static panel selection variable                                           */\n";
	print $fh "/*---------------------------------------------------------------------------*/\n";
	print $fh "enum {\n";

	foreach $lcdenum (@$list) {
		print $fh $lcdenum."_PANEL,\n";
	}

	print $fh "};\n\n";
}

sub printstructure
{
	my $fh = shift;
	my $list = shift;
	my $lcdmap;
	print $fh "\n/*---------------------------------------------------------------------------*/\n";
	print $fh "/* static panel board mapping variable                                           */\n";
	print $fh "/*---------------------------------------------------------------------------*/\n";
	print $fh "struct hw_lcd_board_map {\n";
	print $fh "\tuint8_t lcd_id;\n";
	print $fh "\tuint8_t gpio_id;\n";
	print $fh "\tuint16_t product_id;\n";
	print $fh "};\n\n";

	print $fh "static struct hw_lcd_board_map lcd_map[] = {\n";

	foreach $lcdmap (@$list) {
		print $fh "\t{".$lcdmap."},\n";
	}

	print $fh "};\n\n";
}

sub printlcdselectionfunc
{
	my $fh = shift;
	my $enum = shift;
	my $i;

	print $fh "static bool hw_init_panel_data(struct panel_data *paneldata,\n";
	print $fh "			struct hw_panel_info *lcd_info,\n";
	print $fh "			uint8_t panel_id)\n";
	print $fh "{\n";
	print $fh "\tswitch (panel_id) {\n";

	for $i ( 0 ..  scalar(@$enum)-1 ) {
		print $fh "\tcase ".@$enum[$i]."_PANEL:\n";
		printlcdconfig($fh, @$enum[$i]);
	}

	print $fh "\tdefault:\n";
	print $fh "\t\t".'PRINT_INFO("Panel ID not detected %d\n", panel_id);'."\n";
	print $fh "\t\treturn FALSE;\n";
	print $fh "\t}\n\n";
	print $fh "\treturn TRUE;\n";
	print $fh "}\n\n";
}

sub printlcdconfig
{
	my $fh = shift;
	my $name = shift;
	print $fh "\t\tpaneldata->panel = &".lc($name)."_panel_info;\n";
	print $fh "\t\tpaneldata->ldi = &".lc($name)."_panel_ldi;\n";
	print $fh "\t\tpaneldata->smart_bl = &".lc($name)."_panel_smart_bl;\n";
	print $fh "\t\tpaneldata->mipi = &".lc($name)."_panel_mipi;\n";
	print $fh "\t\tpaneldata->dirty_region_info = &".lc($name)."_panel_dirty_region;\n";
	print $fh "\t\tlcd_info->display_on_cmds.cmds_set = ".lc($name)."_on_cmds;\n";
	print $fh "\t\tlcd_info->display_on_cmds.cmd_cnt = ARRAY_SIZE(".lc($name)."_on_cmds);\n";
	print $fh "\t\tlcd_info->display_off_cmds.cmds_set = ".lc($name)."_off_cmds;\n";
	print $fh "\t\tlcd_info->display_off_cmds.cmd_cnt = ARRAY_SIZE(".lc($name)."_off_cmds);\n";
	print $fh "\t\tlcd_info->lcd_platform = &".lc($name)."_panel_platform_config;\n";
	print $fh "\t\tlcd_info->lcd_misc = &".lc($name)."_panel_misc_info;\n";
	print $fh "\t\tlcd_info->power_on_seq = &".lc($name)."_panel_power_on_sequence;\n";
	print $fh "\t\tlcd_info->power_off_seq = &".lc($name)."_panel_power_off_sequence;\n";
	print $fh "\t\tbreak;\n\n"
}

#/* add panel id cmdline for lcd */
sub printlcdmapfunc
{
	my $fh = shift;
	my $list = shift;
	my $map;
	my $default_panel_id;
	my $len = 0;
	
	$default_panel_id = pop(@LCDMap);
	$len = length ($default_panel_id);
	$default_panel_id = substr($default_panel_id, 0, ($len - 12));
	print $fh "static uint8_t hw_lcd_panel_init(uint16_t hw_id, uint32_t lcd_id)\n";
	print $fh "{\n";
	print $fh "\tuint8_t lcd_panel_id = AUO_OTM1901A_5P2_1080P_VIDEO_DEFAULT_PANEL;" . " /*default panel id*/\n";
#	print $fh "\tuint8_t lcd_hw_id = 0;\n";
	print $fh "\tint i = 0;\n";
#	print $fh "\tlcd_hw_id = which_lcd_module_triple();\n\n";
	print $fh "\t".'PRINT_INFO("lcd_panel_init lcd id = %d\n", lcd_id);'."\n";
#	print $fh "\t".'snprintf(lcd_id,sizeof(lcd_id), " huawei,lcd_panel_id = %X", lcd_hw_id);'."\n";

	print $fh "\tfor (i = 0; i < ARRAY_SIZE(lcd_map); ++i) {\n";
	print $fh "\t\tif ((lcd_map[i].product_id == hw_id) && (lcd_map[i].gpio_id == lcd_id)) {\n";
	print $fh "\t\t\tlcd_panel_id = lcd_map[i].lcd_id;\n";
	print $fh "\t\t\tbreak;\n";
	print $fh "\t\t}\n";
	print $fh "\t}\n\n";
	
	print $fh "\treturn lcd_panel_id;\n";
	print $fh "}\n\n";

}
